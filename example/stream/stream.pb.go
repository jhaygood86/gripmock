// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package stream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type Request struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_b89e769b981cf265, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type Reply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_b89e769b981cf265, []int{1}
}
func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (dst *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(dst, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "stream.Request")
	proto.RegisterType((*Reply)(nil), "stream.Reply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GripmockClient is the client API for Gripmock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GripmockClient interface {
	// server to client sreaming
	ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Gripmock_ServerStreamClient, error)
	// client to server streaming
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Gripmock_ClientStreamClient, error)
	// bidirectional streaming
	Bidirectional(ctx context.Context, opts ...grpc.CallOption) (Gripmock_BidirectionalClient, error)
}

type gripmockClient struct {
	cc *grpc.ClientConn
}

func NewGripmockClient(cc *grpc.ClientConn) GripmockClient {
	return &gripmockClient{cc}
}

func (c *gripmockClient) ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Gripmock_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gripmock_serviceDesc.Streams[0], "/stream.Gripmock/serverStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gripmockServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gripmock_ServerStreamClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type gripmockServerStreamClient struct {
	grpc.ClientStream
}

func (x *gripmockServerStreamClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gripmockClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Gripmock_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gripmock_serviceDesc.Streams[1], "/stream.Gripmock/clientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gripmockClientStreamClient{stream}
	return x, nil
}

type Gripmock_ClientStreamClient interface {
	Send(*Request) error
	CloseAndRecv() (*Reply, error)
	grpc.ClientStream
}

type gripmockClientStreamClient struct {
	grpc.ClientStream
}

func (x *gripmockClientStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gripmockClientStreamClient) CloseAndRecv() (*Reply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gripmockClient) Bidirectional(ctx context.Context, opts ...grpc.CallOption) (Gripmock_BidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gripmock_serviceDesc.Streams[2], "/stream.Gripmock/bidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &gripmockBidirectionalClient{stream}
	return x, nil
}

type Gripmock_BidirectionalClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type gripmockBidirectionalClient struct {
	grpc.ClientStream
}

func (x *gripmockBidirectionalClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gripmockBidirectionalClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GripmockServer is the server API for Gripmock service.
type GripmockServer interface {
	// server to client sreaming
	ServerStream(*Request, Gripmock_ServerStreamServer) error
	// client to server streaming
	ClientStream(Gripmock_ClientStreamServer) error
	// bidirectional streaming
	Bidirectional(Gripmock_BidirectionalServer) error
}

func RegisterGripmockServer(s *grpc.Server, srv GripmockServer) {
	s.RegisterService(&_Gripmock_serviceDesc, srv)
}

func _Gripmock_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GripmockServer).ServerStream(m, &gripmockServerStreamServer{stream})
}

type Gripmock_ServerStreamServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type gripmockServerStreamServer struct {
	grpc.ServerStream
}

func (x *gripmockServerStreamServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _Gripmock_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GripmockServer).ClientStream(&gripmockClientStreamServer{stream})
}

type Gripmock_ClientStreamServer interface {
	SendAndClose(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type gripmockClientStreamServer struct {
	grpc.ServerStream
}

func (x *gripmockClientStreamServer) SendAndClose(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gripmockClientStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gripmock_Bidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GripmockServer).Bidirectional(&gripmockBidirectionalServer{stream})
}

type Gripmock_BidirectionalServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type gripmockBidirectionalServer struct {
	grpc.ServerStream
}

func (x *gripmockBidirectionalServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gripmockBidirectionalServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Gripmock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Gripmock",
	HandlerType: (*GripmockServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "serverStream",
			Handler:       _Gripmock_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "clientStream",
			Handler:       _Gripmock_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "bidirectional",
			Handler:       _Gripmock_Bidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_stream_b89e769b981cf265) }

var fileDescriptor_stream_b89e769b981cf265 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x64, 0xb9, 0xd8,
	0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x45, 0x2e, 0xd6, 0xa0, 0xd4, 0x82, 0x9c,
	0x4a, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0x74, 0x98, 0x3c, 0x8c, 0x6b, 0xb4,
	0x98, 0x91, 0x8b, 0xc3, 0xbd, 0x28, 0xb3, 0x20, 0x37, 0x3f, 0x39, 0x5b, 0xc8, 0x80, 0x8b, 0xa7,
	0x38, 0xb5, 0xa8, 0x2c, 0xb5, 0x28, 0x18, 0x6c, 0xbc, 0x10, 0xbf, 0x1e, 0xd4, 0x56, 0xa8, 0x25,
	0x52, 0xbc, 0x08, 0x81, 0x82, 0x9c, 0x4a, 0x03, 0x46, 0x90, 0x8e, 0xe4, 0x9c, 0xcc, 0xd4, 0xbc,
	0x12, 0xe2, 0x74, 0x68, 0x30, 0x0a, 0x19, 0x73, 0xf1, 0x26, 0x65, 0xa6, 0x64, 0x16, 0xa5, 0x26,
	0x97, 0x64, 0xe6, 0xe7, 0x25, 0xe6, 0x10, 0xd6, 0x62, 0xc0, 0x98, 0xc4, 0x06, 0xf6, 0xb6, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0x62, 0x90, 0x1d, 0x75, 0x06, 0x01, 0x00, 0x00,
}
